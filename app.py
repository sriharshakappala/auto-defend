import streamlit as st
import os
from auto_defend.defender import AutoDefend

st.set_page_config(page_title="Auto Defend", layout="centered", page_icon="🛡️")

# Sidebar
with st.sidebar:
    st.title("🛡️ Auto Defend")
    st.markdown("""
    **Auto Defend** helps you automatically fix security vulnerabilities in your codebase and raise a Pull Request on GitHub.
    
    - Enter a vulnerability description
    - Provide a GitHub repo URL
    - Add your GitHub token
    - Add your Gemini API key
    
    **Get your API keys:**
    - [GitHub Token Guide](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
    - [Gemini API Key](https://makersuite.google.com/app/apikey)
    """)
    st.info("Your credentials are never stored.")

# Main UI
st.markdown("""
<div style='text-align: center;'>
    <h1 style='margin-bottom:0;'>🛡️ Auto Defend</h1>
    <p style='color: #666; margin-top:0;'>AI-powered vulnerability remediation for your codebase</p>
</div>
""", unsafe_allow_html=True)

st.markdown("---")

col1, col2 = st.columns(2)

with col1:
    vuln_desc = st.text_area(
        "Vulnerability Description",
        help="Describe the security issue or vulnerability.",
        placeholder="e.g. SQL Injection in user login..."
    )

with col2:
    repo_url = st.text_input(
        "GitHub Repository URL",
        help="e.g. https://github.com/user/repo",
        placeholder="https://github.com/user/repo"
    )
    github_token = st.text_input(
        "GitHub Token",
        type="password",
        help="Personal Access Token with repo permissions."
    )
    
    gemini_api_key = st.text_input(
        "Gemini API Key",
        type="password",
        help="Google Gemini API key for AI-powered vulnerability fixes."
    )

st.markdown("---")

col3, col4, col5 = st.columns([1,2,1])
with col4:
    defend_btn = st.button("🛡️ Defend & Raise PR", use_container_width=True)

if defend_btn:
    # Validate inputs
    if not vuln_desc:
        st.error("Please provide a vulnerability description.")
    elif not repo_url:
        st.error("Please provide a GitHub repository URL.")
    elif not github_token:
        st.error("Please provide your GitHub token.")
    elif not gemini_api_key:
        st.error("Please provide your Gemini API key.")
    else:
        try:
            with st.spinner("🔍 Analyzing and defending your repository..."):
                # Initialize AutoDefend
                defender = AutoDefend(
                    repo_url=repo_url,
                    github_token=github_token,
                    gemini_api_key=gemini_api_key
                )
                
                # Clone the repository
                st.info("📥 Cloning repository...")
                local_dir = defender.clone_repo()
                
                # Fix vulnerabilities using Gemini
                st.info("🤖 Analyzing vulnerabilities with Gemini AI...")
                defender.fix_vulnerability_in_file_with_llm(vuln_desc)
                
                # Commit and push changes
                st.info("💾 Committing and pushing changes...")
                commit_message = f"🛡️ Auto Defend: Fix vulnerability - {vuln_desc[:50]}..."
                if defender.commit_and_push(commit_message):
                    # Create pull request
                    st.info("🔄 Creating pull request...")
                    pr_title = f"🛡️ Auto Defend: Security vulnerability fix"
                    pr_body = f"""This PR was automatically generated by Auto Defend to fix the following security vulnerability:

**Vulnerability Description:**
{vuln_desc}

**Changes Made:**
- Applied AI-powered security fixes using Google Gemini
- Improved code security and best practices

**Generated by:** Auto Defend 🛡️
"""
                    
                    pr_url = defender.create_pull_request(pr_title, pr_body)
                    
                    # Success message
                    st.success("✅ Pull Request created successfully!")
                    st.markdown(f"**PR URL:** [{pr_url}]({pr_url})")
                    
                    # Cleanup
                    defender.cleanup()
                else:
                    st.warning("⚠️ No changes were made to the repository. The vulnerability might already be fixed or the description needs to be more specific.")
                    defender.cleanup()
                    
        except FileNotFoundError as e:
            st.error(f"❌ File not found: {str(e)}")
        except ValueError as e:
            st.error(f"❌ Invalid input: {str(e)}")
        except Exception as e:
            st.error(f"❌ An error occurred: {str(e)}")
            st.info("💡 Please check your inputs and try again.") 